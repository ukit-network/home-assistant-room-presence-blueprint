blueprint:
  name: Room Presence Sensor Combiner (Configurable States)
  description: >
    Combine multiple presence sensors into a single virtual room sensor.
    Allows specifying custom states or thresholds for each sensor directly 
    in the blueprint configuration.
  domain: automation
  input:
    room_name:
      name: Room Name
      description: Name of the room to represent in the virtual sensor.
      default: 'Room'
    presence_sensors:
      name: Presence Sensors
      description: List of presence sensors to monitor.
      selector:
        entity:
          domain: binary_sensor
          multiple: true
    sensor_conditions:
      name: Sensor Conditions
      description: >
        List of states or thresholds for each presence sensor. 
        Enter a corresponding condition for each sensor (e.g., `on`, `open`, `> 20`).
        Ensure the number of conditions matches the number of sensors.
      default: ''
      selector:
        text:
          multiline: true
    virtual_sensor:
      name: Virtual Room Sensor
      description: Input boolean to represent the room presence state.
      selector:
        entity:
          domain: input_boolean

trigger:
  - platform: state
    entity_id: !input presence_sensors

condition: []

action:
  - choose:
      - conditions:
          - condition: template
            value_template: >
              {%- set sensors = namespace(presence=False) -%}
              {%- for sensor, condition in (blueprint.inputs.presence_sensors | zip(blueprint.inputs.sensor_conditions.splitlines())) -%}
                {%- if states(sensor) == condition or 
                      (states(sensor) | float(0) > (condition | float(0)) if condition.isdigit() else False) -%}
                  {%- set sensors.presence = True -%}
                {%- endif -%}
              {%- endfor -%}
              {{ sensors.presence }}
        sequence:
          - service: input_boolean.turn_on
            target:
              entity_id: !input virtual_sensor
      - conditions:
          - condition: template
            value_template: >
              {%- set sensors = namespace(presence=False) -%}
              {%- for sensor, condition in (blueprint.inputs.presence_sensors | zip(blueprint.inputs.sensor_conditions.splitlines())) -%}
                {%- if states(sensor) == condition or 
                      (states(sensor) | float(0) > (condition | float(0)) if condition.isdigit() else False) -%}
                  {%- set sensors.presence = True -%}
                {%- endif -%}
              {%- endfor -%}
              {{ not sensors.presence }}
        sequence:
          - service: input_boolean.turn_off
            target:
              entity_id: !input virtual_sensor
